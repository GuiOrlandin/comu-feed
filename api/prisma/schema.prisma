datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String   @id @default(uuid())
    avatar        String?
    created_at    DateTime @default(now())
    email         String   @unique
    name          String
    password_hash String?
    Community_Founder Community[]
    Community_Member  Community[] @relation("CommunityMembers")
    textPosts       TextPost[]  
    mediaPosts      MediaPost[]
    comments Comment[]
    love Love[]

    @@map("users")
}
model Community {
    id            String   @id @default(uuid())
    created_at    DateTime @default(now())
    community_image         String?
    name          String
    description          String?
    User_Founder   User     @relation(fields: [founder_id], references: [id])
    founder_id      String
    textPosts       TextPost[]  
    mediaPosts      MediaPost[]  
    key_access    String?
    password      String?
    User_Members   User[]    @relation("CommunityMembers")

    @@map("communities")
}

model TextPost {
    id            String    @id @default(uuid())
    created_at    DateTime  @default(now())
    user          User      @relation(fields: [user_id], references: [id])
    user_id       String
    title         String
    community     Community @relation(fields: [community_id], references: [id])
    community_id  String
    content       String
    love Love[]

    comments      Comment[]

    @@map("text_posts")
}

model MediaPost {
    id            String    @id @default(uuid())
    created_at    DateTime  @default(now())
    user          User      @relation(fields: [user_id], references: [id])
    user_id       String
    title         String
    community     Community @relation(fields: [community_id], references: [id])
    community_id  String
    media         String    
    love Love[]
    comments      Comment[]

    @@map("media_posts")
}

model Love {
    id            String    @id @default(uuid())
    user          User      @relation(fields: [user_id], references: [id])
    user_id       String
    text_post          TextPost?     @relation(fields: [text_post_id], references: [id])
    media_post          MediaPost?     @relation(fields: [media_post_id], references: [id])
    text_post_id       String?
    media_post_id       String?

    @@map("love")
}


model Comment {
    id            String   @id @default(uuid())
    created_at    DateTime @default(now())
    user          User      @relation(fields: [user_id], references: [id])
    user_id       String
    text_post          TextPost?     @relation(fields: [text_post_id], references: [id])
    media_post          MediaPost?     @relation(fields: [media_post_id], references: [id])
    text_post_id       String?
    media_post_id       String?
    content       String


    @@map("comments")
}
